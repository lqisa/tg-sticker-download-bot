const ffmpegPath=require("@ffmpeg-installer/ffmpeg").path,JSZip=require("jszip"),fs=require("fs"),ffmpeg=require("fluent-ffmpeg"),path=(ffmpeg.setFfmpegPath(ffmpegPath),require("path")),https=require("https"),assertPath=path.resolve(__dirname,"assets");function getFileNameFromPath(e){var r=e.lastIndexOf("\\"),r=-1===r?e.lastIndexOf("/"):r;return-1===r?"":e.slice(r+1)}function downloadFile(t,n){return new Promise((r,o)=>{https.get(t,e=>{e.pipe(n),n.on("finish",()=>{n.close(),console.log("Download Completed: ",t),r()})}).on("error",e=>{console.error("error: ",e),o("Download Error")})})}function convert2Gif(t=assertPath,n,a="webm"){return new Promise((e,r)=>{var o=path.resolve(t,n+"."+a);console.log("path: ",o),ffmpeg(o).setDuration("15").size("70%").fps(30).output(path.resolve(t,n+".gif")).on("error",function(e){console.log("An error occurred: "+e.message),r(e)}).on("end",function(){console.log("Finished encoding: ",n),e()}).run()})}function packFile(n,a=[]){return new Promise(async(e,r)=>{const o=new JSZip,t=await Promise.all(a.map(e=>stream2buffer(fs.createReadStream(e)))).catch(e=>{console.log("packFile stage: convert stream to buffer error"),r(e)});a.forEach((e,r)=>{e=getFileNameFromPath(e);console.log(`pack ${e}...`),o.file(e,t[r])}),o.generateNodeStream({type:"nodebuffer",streamFiles:!0}).pipe(fs.createWriteStream(path.resolve(assertPath,n+".zip")).on("finish",function(){console.log(`package ${n} written`),e()}))})}function stream2buffer(t){return new Promise((e,r)=>{const o=[];t.on("data",e=>o.push(e)),t.on("end",()=>e(Buffer.concat(o))),t.on("error",e=>r(e))})}module.exports={downloadFile:downloadFile,convert2Gif:convert2Gif,packFile:packFile,getFileNameFromPath:getFileNameFromPath};